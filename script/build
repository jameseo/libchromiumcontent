#!/usr/bin/env python

import argparse
import os
import multiprocessing
import subprocess
import sys
import platform

from lib.config import get_output_dir


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
VENDOR_DIR = os.path.join(SOURCE_ROOT, 'vendor')
TARGETS = ['chromiumcontent_all']
COMPONENTS = ['static_library', 'shared_library', 'ffmpeg']

MIPS64EL_GCC = 'gcc-4.8.3-d197-n64-loongson'
# Whether the host system is a mips64el machine.
IS_MIPS64EL_HOST = platform.uname()[5] == 'mips64'

NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja')
if sys.platform == 'win32':
  NINJA = '{0}.exe'.format(NINJA)
elif IS_MIPS64EL_HOST:
  NINJA = os.path.join(VENDOR_DIR, 'depot_tools', 'ninja-build')


def main():
  args = parse_args()
  target_arch = args.target_arch

  jobs = multiprocessing.cpu_count()

  env = os.environ.copy()
  env['PATH'] = os.pathsep.join([os.path.join(VENDOR_DIR, 'depot_tools'),
                                 env['PATH']])
  if sys.platform in ['win32', 'cygwin']:
    env['DEPOT_TOOLS_WIN_TOOLCHAIN'] = '0'
  elif target_arch == 'arm64':
    binutils_dir = os.path.join(VENDOR_DIR, 'binutils-aarch64')
    env['LD_LIBRARY_PATH'] = binutils_dir + '/usr/x86_64-linux-gnu/aarch64-linux-gnu/lib'
    env['PATH'] = os.pathsep.join([binutils_dir + '/usr/bin', env['PATH']])
  elif target_arch == 'mips64el' and not IS_MIPS64EL_HOST:
    gcc_dir = os.path.join(VENDOR_DIR, MIPS64EL_GCC)
    ldlib_dirs = [
      gcc_dir + '/usr/x86_64-unknown-linux-gnu/mips64el-redhat-linux/lib',
      gcc_dir + '/usr/lib64',
      gcc_dir + '/usr/mips64el-redhat-linux/lib64',
      gcc_dir + '/usr/mips64el-redhat-linux/sysroot/lib64',
      gcc_dir + '/usr/mips64el-redhat-linux/sysroot/usr/lib64',
    ]
    env['LD_LIBRARY_PATH'] = os.pathsep.join(ldlib_dirs)
    env['PATH'] = os.pathsep.join([gcc_dir + '/usr/bin', env['PATH']])
    # Do not run too much jobs for mips64el, otherwise we may get OOM error.
    if jobs > 4:
      jobs = 4

  os.chdir(SOURCE_ROOT)

  jobs = str(jobs)
  for component in COMPONENTS:
    if args.component == 'all' or args.component == component:
      if component == 'shared_library' and args.no_shared_library:
        continue
      elif component == 'static_library' and args.no_static_library:
        continue
      out_dir = get_output_dir(SOURCE_ROOT, target_arch, component)
      target = 'chromiumcontent:chromiumcontent'
      subprocess.check_call([NINJA, '-j', jobs, '-C', os.path.relpath(out_dir), target], env=env)
      if component == 'static_library':
        subenv = env.copy()
        subenv['CHROMIUMCONTENT_2ND_PASS'] = '1'
        target = 'chromiumcontent:libs'
        subprocess.check_call([NINJA, '-j', jobs, '-C', os.path.relpath(out_dir), target], env=subenv)


def parse_args():
  parser = argparse.ArgumentParser(description='Build libchromiumcontent')
  parser.add_argument('-t', '--target_arch', default='x64', help='x64 or ia32')
  parser.add_argument('-c', '--component', default='all',
                      help='static_library or shared_library or all')
  parser.add_argument('-D', '--no_static_library', action='store_true',
                      help='Do not build static library version')
  parser.add_argument('-R', '--no_shared_library', action='store_true',
                      help='Do not build shared library version')
  return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main())
